/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface TServiceDef {
    generateSessionId: (callParams: CallParams$$<null>) => string | Promise<string>;
}
export function registerTService(service: TServiceDef): void;
export function registerTService(serviceId: string, service: TServiceDef): void;
export function registerTService(peer: IFluenceClient$$, service: TServiceDef): void;
export function registerTService(peer: IFluenceClient$$, serviceId: string, service: TServiceDef): void;
       

export function registerTService(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "two-mpc",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "generateSessionId" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const generate_session_id_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay_id ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call peer_id ("two-mpc" "generateSessionId") [] session_id)
                          (call relay_id ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay_id ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [session_id])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function generate_session_id(
    peer_id: string,
    relay_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_session_id(
    peer: IFluenceClient$$,
    peer_id: string,
    relay_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_session_id(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "generate_session_id",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        generate_session_id_script
    )
}

/* eslint-enable */